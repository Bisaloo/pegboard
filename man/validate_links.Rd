% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_links.R
\docType{data}
\name{validate_links}
\alias{validate_links}
\alias{link_enforce_https}
\alias{link_all_reachable}
\alias{link_img_alt_text}
\alias{link_length}
\alias{link_descriptive}
\alias{link_source_list}
\alias{link_internal_anchor}
\alias{link_internal_file}
\alias{link_internal_well_formed}
\alias{link_tests}
\alias{link_info}
\title{Validate Links in a markdown document}
\format{
An object of class \code{character} of length 8.

An object of class \code{character} of length 8.
}
\usage{
validate_links(yrn)

link_enforce_https(VAL)

link_all_reachable(VAL)

link_img_alt_text(VAL)

link_length(VAL)

link_descriptive(VAL)

link_source_list(lt)

link_internal_anchor(VAL, source_list, headings)

link_internal_file(VAL, source_list, root)

link_internal_well_formed(VAL, source_list)

link_tests

link_info
}
\arguments{
\item{yrn}{a \link[tinkr:yarn]{tinkr::yarn} or \link{Episode} object.}

\item{lt}{the output of \code{\link[=make_link_table]{make_link_table()}}}

\item{source_list}{output of \code{link_source_list}}

\item{headings}{an \code{xml_nodeset} of headings}

\item{root}{the root path to the lesson that contains this file.}
}
\value{
a data frame with parsed information from \code{\link[xml2:url_parse]{xml2::url_parse()}} and
columns of logical values indicating the tests that passed.
}
\description{
This function will validate that links do not throw an error in markdown
documents. This will include links to images and will respect robots.txt for
websites.
}
\details{
\subsection{Link Validity}{

All links must resolve to a specific location. If it does not exist, then the
link is invalid.
\subsection{External links}{

These links must start with a valid and secure protocol. This means that we
will enforce HTTPS over HTTP. Any link with HTTP will be flagged. Most
importantly, these links must not return an error code > 399.
}

\subsection{Cross-lesson links}{

These links will have no protocol, but should resolve to the HTML version of
a page and have the correct capitalisation.
}

\subsection{Anchors (aka fragments)}{

Anchors are located at the end of URLs that start with a \verb{#} sign. These are
used to indicate a section of the documenation.
}

}

\subsection{Accessibility (a11y)}{

Accessibillity ensures that your links are accurate and descriptive for
people who have slow connections or use screen reader technology.
\subsection{Alt-text (for images)}{

All images must have associated alt-text. In pandoc, this is acheived by
writing the \code{alt} attribute in curly braces after the image:
\verb{![image caption](link)\{alt='alt text'\}}:
\url{https://webaim.org/techniques/alttext/}
}

\subsection{Descriptive text}{

All links must have descriptive text associated with them, which is
beneficial for screen readers scanning the links on a page to not have a
list full of "link", "link", "link":
\url{https://webaim.org/techniques/hypertext/link_text#uninformative}
}

\subsection{Text length}{

Link text length must be greater than 1:
\url{https://webaim.org/techniques/hypertext/link_text#link_length}
}

}
}
\note{
At the moment, we do not currently test if all links are reachable.
This is a feature planned for the future.

This function is internal. Please use the methods for the \link{Episode} and
\link{Lesson} classes.
}
\examples{
l <- Lesson$new(lesson_fragment())
e <- l$episodes[[3]]
# Our link validators run a series of tests on links and images and return a 
# data frame with information about the links (via xml2::url_parse), along 
# with the results of the tests
v <- pegboard:::validate_links(e)
names(v)
v
# The validator does not produce any warnings or messages, but this data
# frame can be passed on to other functions that will throw them for us. We
# have a function that will throw a warning/message for each link that
# fails the tests. These messages are controlled by `link_tests` and 
# `link_info`.
pegboard:::link_tests
pegboard:::link_info
pegboard:::throw_link_warnings(v)
}
\keyword{datasets}
\keyword{internal}
