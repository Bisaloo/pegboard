% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_headings.R
\docType{data}
\name{validate_headings}
\alias{validate_headings}
\alias{heading_tests}
\alias{heading_info}
\alias{headings_first_heading_is_second_level}
\alias{headings_greater_than_first_level}
\alias{headings_are_sequential}
\alias{headings_have_names}
\alias{headings_are_unique}
\title{Validate headings}
\format{
An object of class \code{character} of length 5.

An object of class \code{character} of length 5.
}
\usage{
validate_headings(headings, title = NULL, offset = 5L)

heading_tests

heading_info

headings_first_heading_is_second_level(VAL)

headings_greater_than_first_level(VAL)

headings_are_sequential(VAL)

headings_have_names(VAL)

headings_are_unique(VAL)
}
\arguments{
\item{headings}{an object of xml_nodelist.}

\item{title}{the title of the document}

\item{offset}{the number of lines to offset the position (equal to the size
of the yaml header).}

\item{VAL}{a data frame that contains the results of \code{\link[=make_heading_table]{make_heading_table()}}
and logical columns that match the name of the test.}
}
\value{
a list with two elements:
\enumerate{
\item a data frame that contains the results of \code{\link[=make_heading_table]{make_heading_table()}} and
logical columns for each test where \code{FALSE} indicates a failed test for
a given heading.
\item a data frame that can be printed as a tree with \code{show_heading_tree()}
}
}
\description{
This will validate the following aspects of all headings:
}
\details{
\itemize{
\item first heading starts at level 2 (\code{first_heading_is_second_level})
\item greater than level 1 (\code{all_are_greater_than_first_level})
\item increse sequentially (e.g. no jumps from 2 to 4) (\code{all_are_sequential})
\item have names (\code{all_have_names})
\item unique in their own hierarchy (\code{all_are_unique})
}
}
\note{
This is an internal function implemented for the \link{Episode} and \link{Lesson}
classes.
}
\examples{
l <- Lesson$new(lesson_fragment())
e <- l$episodes[[3]]
# Our headings validators run a series of tests on headings and return a data
# frame with information about the headings along with the results of the
# tests
v <- pegboard:::validate_headings(e$headings, e$get_yaml()$title, length(e$yaml))
names(v)
v$results
v$results$path <- fs::path_rel(e$path, e$lesson)
# The validator does not produce any warnings or messages, but this data
# frame can be passed on to other functions that will throw them for us. We
# have a function that will throw a warning/message for each heading that
# fails the tests. These messages are controlled by `heading_tests` and 
# `heading_info`.
pegboard:::heading_tests
pegboard:::heading_info
pegboard:::throw_heading_warnings(v$results)
# Because the headings are best understood in tree form we have a utility
# that will print the heading tree with the associated errors:
pegboard:::show_heading_tree(v$tree)
}
\keyword{datasets}
\keyword{internal}
