% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Lesson.R
\name{Lesson}
\alias{Lesson}
\title{Class to contain a single Lesson by the Carpentries}
\description{
This is a wrapper for several \link{Episode} class objects.
}
\details{
Lessons are made of up several episodes within the \verb{_episodes/} directory of
a lesson. This class keeps track of several episodes and allows us to switch
between RMarkdown and markdown episodes
}
\examples{

## ------------------------------------------------
## Method `Lesson$new`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$path
frg$episodes

## ------------------------------------------------
## Method `Lesson$thin`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$thin()

## ------------------------------------------------
## Method `Lesson$reset`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$episodes[[1]]$body
frg$isolate_blocks()$episodes[[1]]$body # empty
frg$reset()$episodes[[1]]$body # reset

## ------------------------------------------------
## Method `Lesson$isolate_blocks`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$isolate_blocks()$body # only one challenge block_quote

## ------------------------------------------------
## Method `Lesson$validate_headings`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$validate_headings()

## ------------------------------------------------
## Method `Lesson$validate_links`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$validate_links()
}
\seealso{
internal functions \code{\link[=validate_links]{validate_links()}} and \code{\link[=validate_headings]{validate_headings()}}
for details.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{path}}{[\code{character}] path to Lesson directory}

\item{\code{episodes}}{[\code{list}] list of \link{Episode} class objects representing
the episodes of the lesson.}

\item{\code{extra}}{[\code{list}] list of \link{Episode} class objects representing
the extra markdown components including index, setup, information
for learners, information for instructors, and learner profiles. This
is not processed for the jekyll lessons.}

\item{\code{rmd}}{[\code{logical}] when \code{TRUE}, the episodes represent RMarkdown
files, default is \code{FALSE} for markdown files.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{n_problems}}{number of problems per episode}

\item{\code{show_problems}}{contents of the problems per episode}

\item{\code{files}}{the source files for each episode}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Lesson$new()}}
\item \href{#method-blocks}{\code{Lesson$blocks()}}
\item \href{#method-challenges}{\code{Lesson$challenges()}}
\item \href{#method-solutions}{\code{Lesson$solutions()}}
\item \href{#method-thin}{\code{Lesson$thin()}}
\item \href{#method-reset}{\code{Lesson$reset()}}
\item \href{#method-isolate_blocks}{\code{Lesson$isolate_blocks()}}
\item \href{#method-validate_headings}{\code{Lesson$validate_headings()}}
\item \href{#method-validate_links}{\code{Lesson$validate_links()}}
\item \href{#method-clone}{\code{Lesson$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
create a new Lesson object from a directory
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$new(path = NULL, rmd = FALSE, jekyll = TRUE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{[\code{character}] path to a lesson directory. This must have a
folder called \verb{_episodes} within that contains markdown episodes}

\item{\code{rmd}}{[\code{logical}] when \code{TRUE}, the imported files will be the
source RMarkdown files. Defaults to \code{FALSE}, which reads the rendered
markdown files.}

\item{\code{jekyll}}{[\code{logical}] when \code{TRUE} (default), the structure of the
lesson is assumed to be derived from the carpentries/styles repository.
When \code{FALSE}, The structure is assumed to be a {sandpaper} lesson and
extra content for learners, instructors, and profiles will be populated.}

\item{\code{...}}{arguments passed on to \link[=Episode]{Episode$new}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a new Lesson object that contains a list of \link{Episode} objects in
\verb{$episodes}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$path
frg$episodes
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-blocks"></a>}}
\if{latex}{\out{\hypertarget{method-blocks}{}}}
\subsection{Method \code{blocks()}}{
Gather all of the blocks from the lesson in a list of xml_nodeset objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$blocks(type = NULL, level = 0, path = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{the type of block quote in the Jekyll syntax like ".challenge",
".discussion", or ".solution"}

\item{\code{level}}{the level of the block within the document. Defaults to \code{0},
which represents all of the block_quotes within the document regardless
of nesting level.}

\item{\code{path}}{[\code{logical}] if \code{TRUE}, the names of each element
will be equivalent to the path. The default is \code{FALSE}, which gives the
name of each episode.}

\item{\code{body}}{the XML body of a carpentries lesson (an xml2 object)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-challenges"></a>}}
\if{latex}{\out{\hypertarget{method-challenges}{}}}
\subsection{Method \code{challenges()}}{
Gather all of the challenges from the lesson in a list of xml_nodeset objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$challenges(path = FALSE, graph = FALSE, recurse = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{[\code{logical}] if \code{TRUE}, the names of each element
will be equivalent to the path. The default is \code{FALSE}, which gives the
name of each episode.}

\item{\code{graph}}{[\code{logical}] if \code{TRUE}, the output will be a data frame
representing the directed graph of elements within the challenges. See
the \code{get_challenge_graph()} method in \link{Episode}.}

\item{\code{recurse}}{[\code{logical}] when \code{graph = TRUE}, this will include the
solutions in the output. See \link{Episode} for more details.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-solutions"></a>}}
\if{latex}{\out{\hypertarget{method-solutions}{}}}
\subsection{Method \code{solutions()}}{
Gather all of the solutions from the lesson in a list of xml_nodeset objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$solutions(path = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{[\code{logical}] if \code{TRUE}, the names of each element
will be equivalent to the path. The default is \code{FALSE}, which gives the
name of each episode.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-thin"></a>}}
\if{latex}{\out{\hypertarget{method-thin}{}}}
\subsection{Method \code{thin()}}{
Remove episodes that have no challenges
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$thin(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{[\code{logical}] if \code{TRUE} (default), the names of each
episode removed is reported. Set to \code{FALSE} to remove this behavior.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the Lesson object, invisibly
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$thin()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reset"></a>}}
\if{latex}{\out{\hypertarget{method-reset}{}}}
\subsection{Method \code{reset()}}{
Re-read all Episodes from disk
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$reset()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the Lesson object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$episodes[[1]]$body
frg$isolate_blocks()$episodes[[1]]$body # empty
frg$reset()$episodes[[1]]$body # reset
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-isolate_blocks"></a>}}
\if{latex}{\out{\hypertarget{method-isolate_blocks}{}}}
\subsection{Method \code{isolate_blocks()}}{
Remove all elements except for those within block quotes that have a
kramdown tag. Note that this is a destructive process.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$isolate_blocks()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the Episode object, invisibly
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$isolate_blocks()$body # only one challenge block_quote
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate_headings"></a>}}
\if{latex}{\out{\hypertarget{method-validate_headings}{}}}
\subsection{Method \code{validate_headings()}}{
Validate that the heading elements meet minimum accessibility requirements
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$validate_headings(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{if \code{TRUE}, the heading tree will be printed to the console
with any warnings assocated with the validators}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a wide data frame with five rows and the number of columns equal
to the number of episodes in the lesson with an extra column indicating
the type of validation. See \code{\link[=validate_headings]{validate_headings()}} for details.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$validate_headings()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate_links"></a>}}
\if{latex}{\out{\hypertarget{method-validate_links}{}}}
\subsection{Method \code{validate_links()}}{
Validate that the links and images are valid and accessible
\subsection{Validation variables}{
\itemize{
\item External links use HTTPS (\code{enforce_https})
\item Internal links exist (\code{internal_okay})
\item External links are reachable (\code{all_reachable}) (planned)
\item Images have alt text (\code{img_alt_text})
\item Link text is descriptive (\code{descriptive})
}
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$validate_links(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{if \code{TRUE} (default), Any failed tests will be printed to
the console as a message giving information of where in the document
the failing links/images appear.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a wide data frame with five rows and the number of columns equal
to the number of episodes in the lesson with an extra column indicating
the type of validation. See the same method in the \link{Episode} class for
details.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$validate_links()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
