% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Lesson.R
\name{Lesson}
\alias{Lesson}
\title{Class to contain a single Lesson by the Carpentries}
\description{
This is a wrapper for several \link{Episode} class objects.
}
\details{
Lessons are made of up several episodes within the \verb{_episodes/} directory of
a lesson. This class keeps track of several episodes and allows us to switch
between RMarkdown and markdown episodes
}
\examples{

## ------------------------------------------------
## Method `Lesson$new`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$path
frg$episodes

## ------------------------------------------------
## Method `Lesson$get`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$get("error") # error code blocks
frg$get("links") # links

## ------------------------------------------------
## Method `Lesson$summary`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$summary() # episode summary (default)

## ------------------------------------------------
## Method `Lesson$thin`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$thin()

## ------------------------------------------------
## Method `Lesson$reset`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$episodes[[1]]$body
frg$isolate_blocks()$episodes[[1]]$body # empty
frg$reset()$episodes[[1]]$body # reset

## ------------------------------------------------
## Method `Lesson$isolate_blocks`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$isolate_blocks()$body # only one challenge block_quote

## ------------------------------------------------
## Method `Lesson$handout`
## ------------------------------------------------

lsn <- Lesson$new(lesson_fragment("sandpaper-fragment"), jekyll = FALSE)
cat(lsn$handout())
cat(lsn$handout(solution = TRUE))

## ------------------------------------------------
## Method `Lesson$validate_headings`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$validate_headings()

## ------------------------------------------------
## Method `Lesson$validate_divs`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$validate_divs()

## ------------------------------------------------
## Method `Lesson$validate_links`
## ------------------------------------------------

frg <- Lesson$new(lesson_fragment())
frg$validate_links()

## ------------------------------------------------
## Method `Lesson$trace_lineage`
## ------------------------------------------------

frag <- lesson_fragment("sandpaper-fragment-with-child")
lsn <- Lesson$new(frag, jekyll = FALSE)
lsn$has_children # TRUE
lsn$episodes[[1]]$children # first episode shows 1 immediate child
lsn$trace_lineage(lsn$files[[1]]) # find recursive children of 1st episode
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{path}}{[\code{character}] path to Lesson directory}

\item{\code{episodes}}{[\code{list}] list of \link{Episode} class objects representing
the episodes of the lesson.}

\item{\code{built}}{[\code{list}] list of \link{Episode} class objects representing
the markdown artefacts rendered from RMarkdown files.}

\item{\code{extra}}{[\code{list}] list of \link{Episode} class objects representing
the extra markdown components including index, setup, information
for learners, information for instructors, and learner profiles. This
is not processed for the jekyll lessons.}

\item{\code{children}}{[\code{list}] list of \link{Episode} class objects representing
child files that are needed by any of the components to be built
This is not processed for the jekyll lessons.}

\item{\code{sandpaper}}{[\code{logical}] when \code{TRUE}, the episodes in the lesson
are written in pandoc flavoured markdown. \code{FALSE} would indicate a
jekyll-based lesson written in kramdown.}

\item{\code{rmd}}{[\code{logical}] when \code{TRUE}, the episodes represent RMarkdown
files, default is \code{FALSE} for markdown files (deprecated and unused).}

\item{\code{overview}}{[\code{logical}] when \code{TRUE}, the lesson is an overview
lesson and does not necessarly contain any episodes. Defaults to \code{FALSE}}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{n_problems}}{number of problems per episode}

\item{\code{show_problems}}{contents of the problems per episode}

\item{\code{files}}{the source files for each episode}

\item{\code{has_children}}{a logical indicating the presence (\code{TRUE}) or
absence (\code{FALSE}) of child files within the main files of the lesson}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Lesson-new}{\code{Lesson$new()}}
\item \href{#method-Lesson-load_built}{\code{Lesson$load_built()}}
\item \href{#method-Lesson-get}{\code{Lesson$get()}}
\item \href{#method-Lesson-summary}{\code{Lesson$summary()}}
\item \href{#method-Lesson-blocks}{\code{Lesson$blocks()}}
\item \href{#method-Lesson-challenges}{\code{Lesson$challenges()}}
\item \href{#method-Lesson-solutions}{\code{Lesson$solutions()}}
\item \href{#method-Lesson-thin}{\code{Lesson$thin()}}
\item \href{#method-Lesson-reset}{\code{Lesson$reset()}}
\item \href{#method-Lesson-isolate_blocks}{\code{Lesson$isolate_blocks()}}
\item \href{#method-Lesson-handout}{\code{Lesson$handout()}}
\item \href{#method-Lesson-validate_headings}{\code{Lesson$validate_headings()}}
\item \href{#method-Lesson-validate_divs}{\code{Lesson$validate_divs()}}
\item \href{#method-Lesson-validate_links}{\code{Lesson$validate_links()}}
\item \href{#method-Lesson-trace_lineage}{\code{Lesson$trace_lineage()}}
\item \href{#method-Lesson-clone}{\code{Lesson$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-new"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-new}{}}}
\subsection{Method \code{new()}}{
create a new Lesson object from a directory
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$new(path = ".", rmd = FALSE, jekyll = TRUE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{[\code{character}] path to a lesson directory. This must have a
folder called \verb{_episodes} within that contains markdown episodes.
Defaults to the current working directory.}

\item{\code{rmd}}{[\code{logical}] when \code{TRUE}, the imported files will be the
source RMarkdown files. Defaults to \code{FALSE}, which reads the rendered
markdown files.}

\item{\code{jekyll}}{[\code{logical}] when \code{TRUE} (default), the structure of the
lesson is assumed to be derived from the carpentries/styles repository.
When \code{FALSE}, The structure is assumed to be a {sandpaper} lesson and
extra content for learners, instructors, and profiles will be populated.}

\item{\code{...}}{arguments passed on to \link[=Episode]{Episode$new}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a new Lesson object that contains a list of \link{Episode} objects in
\verb{$episodes}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$path
frg$episodes
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-load_built"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-load_built}{}}}
\subsection{Method \code{load_built()}}{
read in the markdown content generated from RMarkdown sources and load
load them into memory
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$load_built()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-get"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-get}{}}}
\subsection{Method \code{get()}}{
A getter for various active bindings in the \link{Episode} class of objects.
In practice this is syntactic sugar around
\code{purrr::map(l$episodes, ~.x$element)}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$get(element = NULL, collection = "episodes")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{element}}{[\code{character}] a defined element from the active bindings
in the \link{Episode} class. Defaults to NULL, which will return nothing.
Elements that do not exist in the \link{Episode} class will return NULL}

\item{\code{collection}}{[\code{character}] one or more of "episodes" (default),
"extra", or "built". Select \code{TRUE} to collect information from all files.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$get("error") # error code blocks
frg$get("links") # links
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-summary"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-summary}{}}}
\subsection{Method \code{summary()}}{
summary of element counts in each episode. This can be useful for
assessing a broad overview of the lesson dynamics
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$summary(collection = "episodes")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{collection}}{[\code{character}] one or more of "episodes" (default),
"extra", or "built". Select \code{TRUE} to collect information from all files.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$summary() # episode summary (default)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-blocks"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-blocks}{}}}
\subsection{Method \code{blocks()}}{
Gather all of the blocks from the lesson in a list of xml_nodeset objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$blocks(type = NULL, level = 0, path = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{the type of block quote in the Jekyll syntax like ".challenge",
".discussion", or ".solution"}

\item{\code{level}}{the level of the block within the document. Defaults to \code{0},
which represents all of the block_quotes within the document regardless
of nesting level.}

\item{\code{path}}{[\code{logical}] if \code{TRUE}, the names of each element
will be equivalent to the path. The default is \code{FALSE}, which gives the
name of each episode.}

\item{\code{body}}{the XML body of a carpentries lesson (an xml2 object)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-challenges"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-challenges}{}}}
\subsection{Method \code{challenges()}}{
Gather all of the challenges from the lesson in a list of xml_nodeset objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$challenges(path = FALSE, graph = FALSE, recurse = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{[\code{logical}] if \code{TRUE}, the names of each element
will be equivalent to the path. The default is \code{FALSE}, which gives the
name of each episode.}

\item{\code{graph}}{[\code{logical}] if \code{TRUE}, the output will be a data frame
representing the directed graph of elements within the challenges. See
the \code{get_challenge_graph()} method in \link{Episode}.}

\item{\code{recurse}}{[\code{logical}] when \code{graph = TRUE}, this will include the
solutions in the output. See \link{Episode} for more details.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-solutions"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-solutions}{}}}
\subsection{Method \code{solutions()}}{
Gather all of the solutions from the lesson in a list of xml_nodeset objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$solutions(path = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{[\code{logical}] if \code{TRUE}, the names of each element
will be equivalent to the path. The default is \code{FALSE}, which gives the
name of each episode.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-thin"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-thin}{}}}
\subsection{Method \code{thin()}}{
Remove episodes that have no challenges
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$thin(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{[\code{logical}] if \code{TRUE} (default), the names of each
episode removed is reported. Set to \code{FALSE} to remove this behavior.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the Lesson object, invisibly
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$thin()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-reset"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-reset}{}}}
\subsection{Method \code{reset()}}{
Re-read all Episodes from disk
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$reset()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the Lesson object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$episodes[[1]]$body
frg$isolate_blocks()$episodes[[1]]$body # empty
frg$reset()$episodes[[1]]$body # reset
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-isolate_blocks"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-isolate_blocks}{}}}
\subsection{Method \code{isolate_blocks()}}{
Remove all elements except for those within block quotes that have a
kramdown tag. Note that this is a destructive process.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$isolate_blocks()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the Episode object, invisibly
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$isolate_blocks()$body # only one challenge block_quote
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-handout"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-handout}{}}}
\subsection{Method \code{handout()}}{
create a handout for all episodes in the lesson
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$handout(path = NULL, solution = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{the path to the R Markdown file to be written. If \code{NULL}
(default), no file will be written and the lines of the output document
will be returned.}

\item{\code{solution}}{if \code{TRUE} solutions will be retained. Defaults to \code{FALSE}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
if \code{path = NULL}, a character vector, otherwise, the object
itself is returned.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{lsn <- Lesson$new(lesson_fragment("sandpaper-fragment"), jekyll = FALSE)
cat(lsn$handout())
cat(lsn$handout(solution = TRUE))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-validate_headings"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-validate_headings}{}}}
\subsection{Method \code{validate_headings()}}{
Validate that the heading elements meet minimum accessibility
requirements. See the internal \code{\link[=validate_headings]{validate_headings()}} for deails.

This will validate the following aspects of all headings:
\itemize{
\item first heading starts at level 2 (\code{first_heading_is_second_level})
\item greater than level 1 (\code{greater_than_first_level})
\item increse sequentially (e.g. no jumps from 2 to 4) (\code{are_sequential})
\item have names (\code{have_names})
\item unique in their own hierarchy (\code{are_unique})
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$validate_headings(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{if \code{TRUE}, the heading tree will be printed to the console
with any warnings assocated with the validators}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data frame with a variable number of rows and the follwoing
columns:
\itemize{
\item \strong{episode} the filename of the episode
\item \strong{heading} the text from a heading
\item \strong{level} the heading level
\item \strong{pos} the position of the heading in the document
\item \strong{node} the XML node that represents the heading
\item (the next five columns are the tests listed above)
\item \strong{path} the path to the file.
}

Each row in the data frame represents an individual heading across the
Lesson. See \code{\link[=validate_headings]{validate_headings()}} for more details.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$validate_headings()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-validate_divs"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-validate_divs}{}}}
\subsection{Method \code{validate_divs()}}{
Validate that the divs are known. See the internal \code{\link[=validate_divs]{validate_divs()}} for
details.
\subsection{Validation variables}{
\itemize{
\item divs are known (\code{is_known})
}
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$validate_divs()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{if \code{TRUE} (default), Any failed tests will be printed to
the console as a message giving information of where in the document
the failing divs appear.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a wide data frame with five rows and the number of columns equal
to the number of episodes in the lesson with an extra column indicating
the type of validation. See the same method in the \link{Episode} class for
details.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$validate_divs()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-validate_links"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-validate_links}{}}}
\subsection{Method \code{validate_links()}}{
Validate that the links and images are valid and accessible. See the
internal \code{\link[=validate_links]{validate_links()}} for details.
\subsection{Validation variables}{
\itemize{
\item External links use HTTPS (\code{enforce_https})
\item Internal links exist (\code{internal_okay})
\item External links are reachable (\code{all_reachable}) (planned)
\item Images have alt text (\code{img_alt_text})
\item Link text is descriptive (\code{descriptive})
\item Link text is more than a single letter (\code{link_length})
}
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$validate_links()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{if \code{TRUE} (default), Any failed tests will be printed to
the console as a message giving information of where in the document
the failing links/images appear.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a wide data frame with five rows and the number of columns equal
to the number of episodes in the lesson with an extra column indicating
the type of validation. See the same method in the \link{Episode} class for
details.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frg <- Lesson$new(lesson_fragment())
frg$validate_links()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-trace_lineage"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-trace_lineage}{}}}
\subsection{Method \code{trace_lineage()}}{
find all the children of a single source file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$trace_lineage(episode_path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{episode_path}}{the path to an episode or extra file}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a character vector of the full lineage of files starting with
a single source file. Note: this assumes a sandpaper lesson that has
child files. If there are no child files, it will return the path
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{frag <- lesson_fragment("sandpaper-fragment-with-child")
lsn <- Lesson$new(frag, jekyll = FALSE)
lsn$has_children # TRUE
lsn$episodes[[1]]$children # first episode shows 1 immediate child
lsn$trace_lineage(lsn$files[[1]]) # find recursive children of 1st episode
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Lesson-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Lesson-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Lesson$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
