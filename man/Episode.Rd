% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Episode.R
\name{Episode}
\alias{Episode}
\title{Class representing XML source of a Carpentries episode}
\description{
Wrapper around an xml document to manipulate and inspect Carpentries episodes
}
\details{
This class is a fancy wrapper around the results of \code{\link[tinkr:to_xml]{tinkr::to_xml()}} and
has method specific to the Carpentries episodes.
}
\note{
The current XLST spec for {tinkr} does not support kramdown, which
the Carpentries Episodes are styled with, thus some block tags will be
destructively modified in the conversion.
}
\examples{

## ------------------------------------------------
## Method `Episode$new`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$name
scope$lesson
scope$challenges

## ------------------------------------------------
## Method `Episode$get_blocks`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
# get all the challenges
scope$get_blocks(".challenge")
# get the solutions
scope$get_blocks(".solution", level = 2)
\dontrun{

  # download the source files for r-novice-gampinder into a Lesson object
  rng <- get_lesson("swcarpentry/r-novice-gapminder")
  dsp1 <- rng$episodes[["04-data-structures-part1.md"]]
  # There are 9 blocks in total
  dsp1$get_blocks()
  # One is a callout block
  dsp1$get_blocks(".callout")
  # One is a discussion block
  dsp1$get_blocks(".discussion")
  # Seven are Challenge blocks
  dsp1$get_blocks(".challenge")
  # There are eight solution blocks:
  dsp1$get_blocks(".solution", level = 2L)
}

## ------------------------------------------------
## Method `Episode$get_challenge_graph`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$get_challenge_graph()

## ------------------------------------------------
## Method `Episode$show`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$head()
scope$tail()
scope$show()

## ------------------------------------------------
## Method `Episode$write`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$write()

## ------------------------------------------------
## Method `Episode$reset`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
xml2::xml_text(scope$tags[1])
xml2::xml_set_text(scope$tags[1], "{: .code}")
xml2::xml_text(scope$tags[1])
scope$reset()
xml2::xml_text(scope$tags[1])

## ------------------------------------------------
## Method `Episode$isolate_blocks`
## ------------------------------------------------

scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$body # a full document with block quotes and code blocks, etc
scope$isolate_blocks()$body # only one challenge block_quote

## ------------------------------------------------
## Method `Episode$unblock`
## ------------------------------------------------

loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$body # a full document with block quotes and code blocks, etc
loop$get_blocks() # all the blocks in the episode
loop$unblock()
loop$get_blocks() # no blocks
loop$code # now there are two blocks with challenge tags
}
\section{Super class}{
\code{\link[tinkr:yarn]{tinkr::yarn}} -> \code{Episode}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{show_problems}}{[\code{list}] a list of all the problems that occurred in parsing the episode}

\item{\code{tags}}{[\code{xml_nodeset}] all the kramdown tags from the episode}

\item{\code{questions}}{[\code{character}] the questions from the episode}

\item{\code{keypoints}}{[\code{character}] the keypoints from the episode}

\item{\code{objectives}}{[\code{character}] the objectives from the episode}

\item{\code{challenges}}{[\code{xml_nodeset}] all the challenges blocks from the episode}

\item{\code{solutions}}{[\code{xml_nodeset}] all the solutions blocks from the episode}

\item{\code{output}}{[\code{xml_nodeset}] all the output blocks from the episode}

\item{\code{error}}{[\code{xml_nodeset}] all the error blocks from the episode}

\item{\code{code}}{[\code{xml_nodeset}] all the code blocks from the episode}

\item{\code{name}}{[\code{character}] the name of the source file without the path}

\item{\code{lesson}}{[\code{character}] the path to the lesson where the episode is from}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Episode$new()}}
\item \href{#method-get_blocks}{\code{Episode$get_blocks()}}
\item \href{#method-label_divs}{\code{Episode$label_divs()}}
\item \href{#method-get_divs}{\code{Episode$get_divs()}}
\item \href{#method-get_yaml}{\code{Episode$get_yaml()}}
\item \href{#method-use_dovetail}{\code{Episode$use_dovetail()}}
\item \href{#method-use_sandpaper}{\code{Episode$use_sandpaper()}}
\item \href{#method-remove_error}{\code{Episode$remove_error()}}
\item \href{#method-remove_output}{\code{Episode$remove_output()}}
\item \href{#method-move_objectives}{\code{Episode$move_objectives()}}
\item \href{#method-move_keypoints}{\code{Episode$move_keypoints()}}
\item \href{#method-move_questions}{\code{Episode$move_questions()}}
\item \href{#method-get_challenge_graph}{\code{Episode$get_challenge_graph()}}
\item \href{#method-show}{\code{Episode$show()}}
\item \href{#method-head}{\code{Episode$head()}}
\item \href{#method-tail}{\code{Episode$tail()}}
\item \href{#method-write}{\code{Episode$write()}}
\item \href{#method-reset}{\code{Episode$reset()}}
\item \href{#method-isolate_blocks}{\code{Episode$isolate_blocks()}}
\item \href{#method-unblock}{\code{Episode$unblock()}}
\item \href{#method-clone}{\code{Episode$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="tinkr" data-topic="yarn" data-id="add_md">}\href{../../tinkr/html/yarn.html#method-add_md}{\code{tinkr::yarn$add_md()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="tinkr" data-topic="yarn" data-id="protect_math">}\href{../../tinkr/html/yarn.html#method-protect_math}{\code{tinkr::yarn$protect_math()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new Episode
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$new(path = NULL, process_tags = TRUE, fix_links = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{[\code{character}] path to a markdown episode file on disk}

\item{\code{process_tags}}{[\code{logical}] if \code{TRUE} (default), kramdown tags will
be processed into attributes of the parent nodes. If \code{FALSE}, these
tags will be treated as text}

\item{\code{fix_links}}{[\code{logical}] if \code{TRUE} (default), links pointing to
liquid tags (e.g. \code{{{ page.root }}}) and included links (those supplied
by a call to \verb{\{\\\% import links.md \\\%\}}) will be appropriately processed
as valid links.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new Episode object with extracted XML data
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$name
scope$lesson
scope$challenges
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_blocks"></a>}}
\if{latex}{\out{\hypertarget{method-get_blocks}{}}}
\subsection{Method \code{get_blocks()}}{
return all \code{block_quote} elements within the Episode
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$get_blocks(type = NULL, level = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{the type of block quote in the Jekyll syntax like ".challenge",
".discussion", or ".solution"}

\item{\code{level}}{the level of the block within the document. Defaults to \code{1},
which represents all of the block_quotes are not nested within any other
block quotes. Increase the nubmer to increase the level of nesting.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
[\code{xml_nodeset}] all the blocks from the episode with the given
tag and level.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
# get all the challenges
scope$get_blocks(".challenge")
# get the solutions
scope$get_blocks(".solution", level = 2)
\dontrun{

  # download the source files for r-novice-gampinder into a Lesson object
  rng <- get_lesson("swcarpentry/r-novice-gapminder")
  dsp1 <- rng$episodes[["04-data-structures-part1.md"]]
  # There are 9 blocks in total
  dsp1$get_blocks()
  # One is a callout block
  dsp1$get_blocks(".callout")
  # One is a discussion block
  dsp1$get_blocks(".discussion")
  # Seven are Challenge blocks
  dsp1$get_blocks(".challenge")
  # There are eight solution blocks:
  dsp1$get_blocks(".solution", level = 2L)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-label_divs"></a>}}
\if{latex}{\out{\hypertarget{method-label_divs}{}}}
\subsection{Method \code{label_divs()}}{
label all the div elements within the Episode to extract them with
\verb{$get_divs()}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$label_divs()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_divs"></a>}}
\if{latex}{\out{\hypertarget{method-get_divs}{}}}
\subsection{Method \code{get_divs()}}{
return all div elements within the Episode
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$get_divs(type = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{the type of div tag (e.g. 'challenge' or 'solution')}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_yaml"></a>}}
\if{latex}{\out{\hypertarget{method-get_yaml}{}}}
\subsection{Method \code{get_yaml()}}{
Extract the yaml metadata from the episode
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$get_yaml()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-use_dovetail"></a>}}
\if{latex}{\out{\hypertarget{method-use_dovetail}{}}}
\subsection{Method \code{use_dovetail()}}{
Ammend or add a setup code block to use \code{{dovetail}}

This will convert your lesson to use the {dovetail} R package for
processing specialized block quotes which will do two things:
\enumerate{
\item convert your lesson from md to Rmd
\item add to your setup chunk the following code\preformatted{library('dovetail')
source(dvt_opts())
}
}

If there is no setup chunk, one will be created. If there is a setup
chunk, then the \code{source} and \code{knitr_fig_path} calls will be removed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$use_dovetail()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-use_sandpaper"></a>}}
\if{latex}{\out{\hypertarget{method-use_sandpaper}{}}}
\subsection{Method \code{use_sandpaper()}}{
Use the sandpaper package for processing

This will convert your lesson to use the \code{{sandpaper}} R package for
processing the lesson instead of Jekyll (default). Doing this will have
the following effects:
\enumerate{
\item code blocks that were marked with liquid tags (e.g. \verb{\{: .language-r\}}
are converted to standard code blocks or Rmarkdown chunks (with
language information at the top of the code block)
\item If rmarkdown is used and the lesson contains python code,
\code{library('reticulate')} will be added to the setup chunk of the
lesson.
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$use_sandpaper(rmd = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rmd}}{if \code{TRUE}, lessons will be converted to RMarkdown documents}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove_error"></a>}}
\if{latex}{\out{\hypertarget{method-remove_error}{}}}
\subsection{Method \code{remove_error()}}{
Remove error blocks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$remove_error()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove_output"></a>}}
\if{latex}{\out{\hypertarget{method-remove_output}{}}}
\subsection{Method \code{remove_output()}}{
Remove output blocks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$remove_output()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-move_objectives"></a>}}
\if{latex}{\out{\hypertarget{method-move_objectives}{}}}
\subsection{Method \code{move_objectives()}}{
move the objectives yaml item to the body
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$move_objectives()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-move_keypoints"></a>}}
\if{latex}{\out{\hypertarget{method-move_keypoints}{}}}
\subsection{Method \code{move_keypoints()}}{
move the keypoints yaml item to the body
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$move_keypoints()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-move_questions"></a>}}
\if{latex}{\out{\hypertarget{method-move_questions}{}}}
\subsection{Method \code{move_questions()}}{
move the questions yaml item to the body
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$move_questions()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_challenge_graph"></a>}}
\if{latex}{\out{\hypertarget{method-get_challenge_graph}{}}}
\subsection{Method \code{get_challenge_graph()}}{
Create a graph of the top-level elements for the challenges.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$get_challenge_graph(recurse = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{recurse}}{if \code{TRUE} (default), the content of the solutions will be
included in the graph; \code{FALSE} will keep the solutions as \code{block_quote}
elements.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data frame with four columns representing all the elements
within the challenges in the Episode:
\itemize{
\item Block: The sequential number of the challenge block
\item from: the inward elements
\item to: the outward elements
\item pos: the position in the markdown document
}

Note that there are three special node names:
\itemize{
\item challenge: start or end of the challenge block
\item solution: start of the solution block
\item lesson: start of the lesson block
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$get_challenge_graph()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-show"></a>}}
\if{latex}{\out{\hypertarget{method-show}{}}}
\subsection{Method \code{show()}}{
show the markdown contents on the screen
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$show()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
a character vector with one line for each line of output
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$head()
scope$tail()
scope$show()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-head"></a>}}
\if{latex}{\out{\hypertarget{method-head}{}}}
\subsection{Method \code{head()}}{
show the first n lines of markdown contents on the screen
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$head(n = 6L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{the number of lines to show from the top}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a character vector with one line for each line of output
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tail"></a>}}
\if{latex}{\out{\hypertarget{method-tail}{}}}
\subsection{Method \code{tail()}}{
show the first n lines of markdown contents on the screen
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$tail(n = 6L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{the number of lines to show from the top}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a character vector with one line for each line of output
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-write"></a>}}
\if{latex}{\out{\hypertarget{method-write}{}}}
\subsection{Method \code{write()}}{
write the episode to disk as markdown
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$write(path = NULL, format = "md", edit = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{the path to write your file to. Defaults to an empty
directory in your temporary folder}

\item{\code{format}}{one of "md" (default) or "xml". This will
create a file with the correct extension in the path}

\item{\code{edit}}{if \code{TRUE}, the file will open in an editor. Defaults to
\code{FALSE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the episode object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$write()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reset"></a>}}
\if{latex}{\out{\hypertarget{method-reset}{}}}
\subsection{Method \code{reset()}}{
Re-read episode from disk
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$reset()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the episode object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
xml2::xml_text(scope$tags[1])
xml2::xml_set_text(scope$tags[1], "{: .code}")
xml2::xml_text(scope$tags[1])
scope$reset()
xml2::xml_text(scope$tags[1])
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-isolate_blocks"></a>}}
\if{latex}{\out{\hypertarget{method-isolate_blocks}{}}}
\subsection{Method \code{isolate_blocks()}}{
Remove all elements except for those within block quotes that have a
kramdown tag. Note that this is a destructive process.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$isolate_blocks()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the Episode object, invisibly
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{scope <- Episode$new(file.path(lesson_fragment(), "_episodes", "17-scope.md"))
scope$body # a full document with block quotes and code blocks, etc
scope$isolate_blocks()$body # only one challenge block_quote
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-unblock"></a>}}
\if{latex}{\out{\hypertarget{method-unblock}{}}}
\subsection{Method \code{unblock()}}{
convert challenge blocks to roxygen-like code blocks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$unblock(token = "#'")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{token}}{the token to use to indicate non-code, Defaults to "#'"}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the Episode object, invisibly
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{loop <- Episode$new(file.path(lesson_fragment(), "_episodes", "14-looping-data-sets.md"))
loop$body # a full document with block quotes and code blocks, etc
loop$get_blocks() # all the blocks in the episode
loop$unblock()
loop$get_blocks() # no blocks
loop$code # now there are two blocks with challenge tags
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Episode$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
